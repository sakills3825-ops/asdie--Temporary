name: Release - Build & Publish

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  check-version:
    name: Check Version Update
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check-version.outputs.changed }}
      new-version: ${{ steps.check-version.outputs.new-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version change
        id: check-version
        run: |
          CURRENT_VERSION=$(cat package.json | grep '"version"' | head -1 | awk -F'"' '{print $4}')
          PREV_VERSION=$(git show HEAD~1:package.json 2>/dev/null | grep '"version"' | head -1 | awk -F'"' '{print $4}' || echo "0.0.0")
          
          if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "new-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run type-check

      - name: Lint
        run: pnpm run lint

      - name: Build production
        run: pnpm run build:prod

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-version, build-release]
    if: needs.check-version.outputs.version-changed == 'true'

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get build date
        id: date
        run: echo "date=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new-version }}
          release_name: Release v${{ needs.check-version.outputs.new-version }}
          body: |
            # Aside v${{ needs.check-version.outputs.new-version }}

            **Release Date:** ${{ steps.date.outputs.date }}

            ## Changes
            - See commit history for detailed changes

            ## Installation
            Download the latest build from assets below.

            ## System Requirements
            - Node.js >= 20.0.0
            - pnpm >= 8.0.0
            - Electron 38 LTS
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        if: steps.create_release.outputs.upload_url
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new-version }}
          files: dist/**/*

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [check-version, create-release]
    if: needs.check-version.outputs.version-changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const version = '${{ needs.check-version.outputs.new-version }}';

            console.log(`âœ… Successfully released Aside v${version}`);
            console.log(`ðŸ“¦ Repository: ${owner}/${repo}`);
            console.log(`ðŸ”— Release URL: https://github.com/${owner}/${repo}/releases/tag/v${version}`);
